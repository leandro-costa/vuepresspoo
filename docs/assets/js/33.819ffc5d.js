(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{404:function(e,a,o){"use strict";o.r(a);var s=o(29),t=Object(s.a)({},(function(){var e=this,a=e.$createElement,o=e._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"exercicio-de-modelagem-1"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#exercicio-de-modelagem-1"}},[e._v("#")]),e._v(" Exercício de Modelagem 1")]),e._v(" "),o("p",[o("sup",{staticClass:"footnote-ref"},[o("a",{attrs:{href:"#fn1",id:"fnref1"}},[e._v("[1]")])])]),e._v(" "),o("ol",[o("li",[o("p",[e._v("Identifique as classes, atributos e métodos necessários para modelar e implementar:")]),e._v(" "),o("ol",[o("li",[e._v("Uma conta corrente que possui um número, um saldo, um status que informa se ela é especial ou não, um limite e um conjunto de movimentações.")]),e._v(" "),o("li",[e._v("Uma movimentação que possui uma descrição, um valor e uma informação se ela é uma movimentação de crédito ou débito.")]),e._v(" "),o("li",[e._v("Um banco que armazene um conjunto de contas e forneça métodos que permitam que sejam feitos criações de conta, exclusão de contas, saques (uma conta corrente só pode fazer saques desde que o valor não exceda o limite de saque‐limite + saldo negativo), depósitos, emissão de saldo e extrato e transferência entre contas.")])])]),e._v(" "),o("li",[o("p",[e._v("Escreva uma classe que represente um país. Um país tem como atributos o seu nome, o nome da capital, sua dimensão em Km2 e uma lista de países com os quais ele faz fronteira. Represente a classe e forneça os seguintes construtores e método:")]),e._v(" "),o("ol",[o("li",[e._v("Construtor que inicialize o nome, capital e a dimensão do país;")]),e._v(" "),o("li",[e._v("Métodos de acesso (obter/get) para as propriedades indicadas no item (a);")]),e._v(" "),o("li",[e._v("Um método que permita verificar se dois países são iguais. Dois países são iguais se tiverem o mesmo nome e a mesma capital. A assinatura deste método deve ser:")])]),e._v(" "),o("div",{staticClass:"language-java line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-java"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("boolean")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token function"}},[e._v("equals")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),o("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("final")]),e._v(" "),o("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Pais")]),e._v(" outro"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br")])]),o("ol",[o("li",[e._v("Um método que define quais outros países fazem fronteira (note que um país não pode fazer fronteira com ele mesmo);")]),e._v(" "),o("li",[e._v("Um método que retorne a lista de países que fazem fronteira;")]),e._v(" "),o("li",[e._v("Um método que receba um outro país como parâmetro e retorne uma lista de vizinhos comuns aos dois paí.")])])]),e._v(" "),o("li",[o("p",[e._v("Implemente uma classe que represente polinômios com uma variável.  Esta classe deve conter:")]),e._v(" "),o("ol",[o("li",[e._v("Diferentes construtores;")]),e._v(" "),o("li",[e._v("Métodos de acesso;")]),e._v(" "),o("li",[e._v("Operações de adição e multiplicação.")]),e._v(" "),o("li",[e._v("Um método que faça a avaliação do polinômio, dado um número real x. Escreva, também, uma classe de testes para a classe que representa o polinômio.")])])]),e._v(" "),o("li",[o("p",[e._v("De forma incremental, traduza o seguinte conjunto de classes em um programa Java. Importante: Não são permitidas chamadas a System.in, System.out ou similares de dentro das classes criadas.")]),e._v(" "),o("ol",[o("li",[o("p",[e._v("Classe: Porta")]),e._v(" "),o("p",[e._v("Atributos: aberta, cor, dimensaoX, dimensaoY, dimensaoZ")]),e._v(" "),o("p",[e._v("Métodos: void abre(), void fecha(), void pinta(String s), boolean estaAberta()")]),e._v(" "),o("p",[e._v("Para testar, crie uma porta, abra e feche a mesma, pinte‐a de diversas cores, altere suas dimensões e use o método estaAberta para verificar se ela está aberta.")])]),e._v(" "),o("li",[o("p",[e._v("Classe: Casa")]),e._v(" "),o("p",[e._v("Atributos: cor, porta1, porta2, porta3")]),e._v(" "),o("p",[e._v("Método:  void  pinta(String  s),  int  quantasPortasEstaoAbertas(), int totalDePortas()")]),e._v(" "),o("p",[e._v("Para testar, crie uma casa e pinte‐a. Crie três portas e coloque‐as na casa; abra e feche as mesmas como desejar. Utilize o método quantasPortasEstaoAbertas para imprimir o número de portas abertas.")])]),e._v(" "),o("li",[o("p",[e._v("Classe: Edificio")]),e._v(" "),o("p",[e._v("Atributos: cor, totalDePortas, totalDeAndares, portas[]")]),e._v(" "),o("p",[e._v("Métodos:  void  pinta(String  s),  int  quantasPortasEstaoAbertas(), void adicionaPorta(Porta  p),  int  totalDePortas(),  void  adicionarAndar(),  int totalDeAndares()")]),e._v(" "),o("p",[e._v("Para testar, crie um edifício, pinte‐o. Crie seis portas e coloque‐as no edifício através do método adicionaPorta, abra e feche‐as como desejar. Utilize o método quantasPortasEstaoAbertas  para  imprimir  o  número  de  portas  abertas  e  o método totalDePortas para imprimir o total de portas em seu edifício. Cria alguns andares utilizado o método adicionarAndar e retorne o número total de andares utilizando o método totalDeAndares.")])]),e._v(" "),o("li",[o("p",[e._v("As classes Casa e edifício ficaram muito parecidas. Crie a classe Imovel e coloque nela tudo o Casa e Edificio tem em comum. Faça Imovel superclasse de Casa e Edificio. Note que alguns métodos em comum não poderão ser implementados por Imovel (e.g., quantasPortasEstaoAbertas e totalDePortas). Logo, esses deverão ser declarados como métodos")])])])])]),e._v(" "),o("hr",{staticClass:"footnotes-sep"}),e._v(" "),o("section",{staticClass:"footnotes"},[o("ol",{staticClass:"footnotes-list"},[o("li",{staticClass:"footnote-item",attrs:{id:"fn1"}},[o("p",[e._v("Leandro A. F. Fernandes, Marcos Lage, Isabel Rosseti. 2ª Lista de Exercícios Orientação a Objetos. Universidade Federal Fluminense, Instituto de Computação, Departamento de Ciência da Computação, Programação de Computadores II "),o("a",{staticClass:"footnote-backref",attrs:{href:"#fnref1"}},[e._v("↩︎")])])])])])])}),[],!1,null,null,null);a.default=t.exports}}]);