(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{407:function(s,t,a){"use strict";a.r(t);var e=a(29),i=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"exercicio-de-heranca-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exercicio-de-heranca-3"}},[s._v("#")]),s._v(" Exercício de Herança 3")]),s._v(" "),a("ol",[a("li",[s._v("Verdadeiro ou Falso, se falso justifique.\n"),a("ul",{staticClass:"contains-task-list"},[a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" Em orientação a objetos herança é a capacidade de uma classe definir o seu comportamento e sua estrutura aproveitando definições de outra classe, normalmente conhecida como classe base ou classe pai.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" O objetivo da herança é generalizar o entendimento de uma classe criando novas características e comportamentos que vão além da superclasse.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" Classes concretas são classes que não produzem instâncias. Elas agrupam características e comportamentos que serão herdados por outras classes.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" Classes abstratas precisam ter métodos com implementação definida.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" Os métodos abstratos são obrigatoriamente implementados pelas classes filhas.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" Polimorfismo só pode ser utilizando com herança, não podendo ser aplicado a interface.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" As interfaces são estritamente modelos de comportamento.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" As interfaces não podem ser instanciadas pois não produzem objetos.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" As interfaces podem ter atributos de instância.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" Classes abstratas podem ter atributos de instância.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" As interfaces não podem ter métodos com corpo definido.")]),s._v(" "),a("li",{staticClass:"task-list-item"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{disabled:"",type:"checkbox"}}),s._v(" Classes abstratas não podem ter métodos com corpo definido.")])])])])])}),[],!1,null,null,null);t.default=i.exports}}]);