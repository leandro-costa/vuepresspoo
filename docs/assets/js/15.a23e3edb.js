(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{384:function(a,s,e){"use strict";e.r(s);var t=e(29),r=Object(t.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"codificando-com-java"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#codificando-com-java"}},[a._v("#")]),a._v(" Codificando com JAVA")]),a._v(" "),e("p",[a._v("Em geral, as linguagens de programação possuem convenções "),e("sup",{staticClass:"footnote-ref"},[e("a",{attrs:{href:"#fn1",id:"fnref1"}},[a._v("[1]")])]),a._v(" para definir os nomes das variáveis. Essas convenções ajudam o desenvolvimento de um código mais legível.")]),a._v(" "),e("p",[a._v("Na convenção de nomes da linguagem Java, os nomes das variáveis devem seguir o padrão "),e("strong",[a._v("camel case")]),a._v(" com a primeira letra minúscula "),e("strong",[a._v("(lower camel case).")]),a._v(" Veja alguns exemplos:")]),a._v(" "),e("ul",[e("li",[a._v("nomeDoCliente")]),a._v(" "),e("li",[a._v("numeroDeAprovados")])]),a._v(" "),e("h2",{attrs:{id:"declarando-e-usando-variaveis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#declarando-e-usando-variaveis"}},[a._v("#")]),a._v(" Declarando e usando variáveis")]),a._v(" "),e("p",[a._v("Dentro de um bloco, podemos declarar variáveis e usá-las. Em Java, toda variável tem um tipo que não pode\nser mudado, uma vez que declarado:")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[a._v("tipoDaVariavel nomeDaVariavel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("Por exemplo, é possível ter uma idade que guarda um número inteiro:")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" idade"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("Com isso, você declara a variável idade, que passa a existir a partir daquela linha. Ela é do tipo int, que guarda um número inteiro. A partir daí, você pode usá-la, primeiramente atribuindo valores.")]),a._v(" "),e("p",[a._v('A linha a seguir é a tradução de: "idade deve valer quinze”.')]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[a._v("idade "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("Além de atribuir, você pode utilizar esse valor. O código a seguir declara novamente a variável idade com valor 15 e imprime seu valor na saída padrão através da chamada a System.out.println.")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// declara a idade")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" idade"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nidade "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// imprime a idade")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("idade"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("Por fim, podemos utilizar o valor de uma variável para algum outro propósito, como alterar ou definir uma segunda variável. O código a seguir cria uma variável chamada idadeNoAnoQueVem com valor de idade "),e("strong",[a._v("mais um.")])]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// calcula a idade no ano seguinte")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" idadeNoAnoQueVem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nidadeNoAnoQueVem "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" idade "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("No mesmo momento que você declara uma variável, também é possível inicializá-la por praticidade:")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" idade "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("15")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("Você pode usar os operadores "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mo",[a._v("+")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("+")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"strut",staticStyle:{height:"0.58333em"}}),e("span",{staticClass:"strut bottom",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),e("span",{staticClass:"base textstyle uncramped"},[e("span",{staticClass:"mord"},[a._v("+")])])])]),a._v(", "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mo",[a._v("−")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("-")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"strut",staticStyle:{height:"0.58333em"}}),e("span",{staticClass:"strut bottom",staticStyle:{height:"0.66666em","vertical-align":"-0.08333em"}}),e("span",{staticClass:"base textstyle uncramped"},[e("span",{staticClass:"mord"},[a._v("−")])])])]),a._v(", "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mi",{attrs:{mathvariant:"normal"}},[a._v("/")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("/")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),e("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),e("span",{staticClass:"base textstyle uncramped"},[e("span",{staticClass:"mord mathrm"},[a._v("/")])])])]),a._v(" e "),e("span",{staticClass:"katex"},[e("span",{staticClass:"katex-mathml"},[e("math",[e("semantics",[e("mrow",[e("mo",[a._v("∗")])],1),e("annotation",{attrs:{encoding:"application/x-tex"}},[a._v("*")])],1)],1)],1),e("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[e("span",{staticClass:"strut",staticStyle:{height:"0.46528em"}}),e("span",{staticClass:"strut bottom",staticStyle:{height:"0.46528em","vertical-align":"0em"}}),e("span",{staticClass:"base textstyle uncramped"},[e("span",{staticClass:"mord"},[a._v("∗")])])])]),a._v(" para operar com números, sendo eles responsáveis pela adição, subtração, divisão e multiplicação, respectivamente. Além desses operadores básicos, há o operador % (módulo) que nada mais é que o "),e("strong",[a._v("resto de uma divisão inteira.")]),a._v(" Veja alguns exemplos:")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" quatro "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" tres "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" oito "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" dezesseis "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("64")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("/")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" um "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("%")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 5 dividido por 2 dá 2 e tem resto 1;")]),a._v("\n                "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// o operador % pega o resto da divisão inteira")]),a._v("\n")])])]),e("p",[a._v("Representar números inteiros é fácil, mas como guardar valores reais, tais como frações de números inteiros e outros? Outro tipo de variável muito utilizado é o double, que armazena um número com ponto flutuante (e que também pode armazenar um número inteiro).")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" pi "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("3.14")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("O tipo boolean armazena um valor verdadeiro ou falso, e só: nada de números, palavras ou endereços, como em algumas outras linguagens.")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("boolean")]),a._v(" verdade "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[e("code",[a._v("true")]),a._v(" e "),e("code",[a._v("false")]),a._v(" são palavras reservadas do Java. É comum que um boolean seja determinado através de uma expressão booleana, isto é, um trecho de código que retorna um booleano, como o exemplo:")]),a._v(" "),e("p",[a._v("int idade = 30;\nboolean menorDeIdade = idade < 18;")]),a._v(" "),e("p",[a._v("O tipo "),e("code",[a._v("char")]),a._v(" guarda um, e apenas um, caractere. Esse caractere deve estar entre aspas simples. Não se esqueça dessas duas características de uma variável do tipo "),e("code",[a._v("char")]),a._v('! Por exemplo, ela não pode guardar um código como " pois o vazio não é um caractere!')]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),a._v(" letra "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[a._v("'a'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("letra"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("p",[a._v("Variáveis do tipo "),e("code",[a._v("char")]),a._v(" são pouco usadas no dia a dia Veremos mais a frente o uso das Strings, que usamos constantemente, porém estas não são denidas por um tipo primitivo.")]),a._v(" "),e("h2",{attrs:{id:"tipos-primitivos-e-valores"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tipos-primitivos-e-valores"}},[a._v("#")]),a._v(" Tipos primitivos e valores")]),a._v(" "),e("p",[a._v("Esses tipos de variáveis são tipos primitivos do Java: o valor que elas guardam são o real conteúdo da variável. Quando você utilizar o operador de atribuição "),e("code",[a._v("=")]),a._v(" o valor será copiado.")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// i recebe uma cópia do valor 5")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" j "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// j recebe uma cópia do valor de i")]),a._v("\ni "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// i vira 6, j continua 5")]),a._v("\n")])])]),e("p",[a._v("Aqui, "),e("code",[a._v("i")]),a._v(" fica com o valor de "),e("code",[a._v("6")]),a._v(". Mas e "),e("code",[a._v("j")]),a._v("? Na segunda linha, "),e("code",[a._v("j")]),a._v(" está valendo "),e("code",[a._v("5")]),a._v(". Quando "),e("code",[a._v("i")]),a._v(" passa a valer "),e("code",[a._v("6")]),a._v(", será\nque "),e("code",[a._v("j")]),a._v(" também muda de valor? Não, pois o valor de um tipo primitivo sempre é copiado.")]),a._v(" "),e("p",[a._v("Apesar da linha "),e("code",[a._v("2")]),a._v(" fazer "),e("code",[a._v("j = i")]),a._v(", a partir desse momento essas variáveis não tem relação nenhuma: o que acontece com uma, não repete em nada com a outra")]),a._v(" "),e("p",[a._v("Exercícios: Variáveis e tipos primitivos")]),a._v(" "),e("ol",[e("li",[a._v("Na empresa onde trabalhamos, há tabelas com o quanto foi gasto em cada mês. Para fechar o balanço do primeiro trimestre, precisamos somar o gasto total. Sabendo que, em Janeiro, foram gastos 15000 reais, em Fevereiro, 23000 reais e em Março, 17000 reais, faça um programa que calcule e imprima o gasto total no trimestre. Siga esses passos:\n"),e("ol",[e("li",[a._v("Crie uma classe chamada BalancoTrimestral com um bloco main, como nos exemplos anteriores;")]),a._v(" "),e("li",[a._v("Dentro do main (o miolo do programa), declare uma variável inteira chamada gastosJaneiro e inicialize-a com 15000;")]),a._v(" "),e("li",[a._v("Crie também as variáveis gastosFevereiro e gastosMarco, inicializando-as com 23000 e 17000, respectivamente, utilize uma linha para cada declaração;")]),a._v(" "),e("li",[a._v("Crie uma variável chamada gastosTrimestre e inicialize-a com a soma das outras 3 variáveis:")])]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" gastosTrimestre "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" gastosJaneiro "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" gastosFevereiro "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" gastosMarco"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[a._v("Imprima a variável gastosTrimestre.")])])]),a._v(" "),e("li",[a._v('Adicione código (sem alterar as linhas que já existem) na classe anterior para imprimir a média mensal de gasto, criando uma variável mediaMensal junto com uma mensagem. Para isso, concatene a String com o valor, usando "Valor da média mensal = "+ mediaMensal')])]),a._v(" "),e("hr",{staticClass:"footnotes-sep"}),a._v(" "),e("section",{staticClass:"footnotes"},[e("ol",{staticClass:"footnotes-list"},[e("li",{staticClass:"footnote-item",attrs:{id:"fn1"}},[e("p",[a._v("Oracle. Code Conventions for the Java Programming Language: 9. Naming Conventions https://www.oracle.com/java/technologies/javase/codeconventions-namingconventions.html (Acessado em 17/07/2021) "),e("a",{staticClass:"footnote-backref",attrs:{href:"#fnref1"}},[a._v("↩︎")])])])])])])}),[],!1,null,null,null);s.default=r.exports}}]);